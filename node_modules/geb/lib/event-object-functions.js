(function() {
  var slice = [].slice;

  module.exports = {
    remove: {
      ebRemove: function(domain) {
        var obj;
        if (typeof eb !== "undefined" && eb !== null ? eb.debug : void 0) {
          console.log("ebRemove: " + domain);
        }
        if (domain instanceof Boolean) {
          obj = this.eo;
        } else {
          obj = this.goToDomain(domain);
        }
        if (obj === false) {
          return false;
        }
        obj.___.removeAllSub();
        return obj;
      },
      removeAllSub: function() {
        var key, obj, ref, results;
        ref = this.eo;
        results = [];
        for (key in ref) {
          obj = ref[key];
          if (obj.eb instanceof Function || obj instanceof Function) {
            results.push(delete this.eo[key]);
          } else {
            results.push(void 0);
          }
        }
        return results;
      }
    },
    instance: {
      createInstance: function(iObj) {
        var i, j, l, len, len1, obj, ref, results, results1, wItem;
        if (iObj instanceof Array) {
          results = [];
          for (j = 0, len = iObj.length; j < len; j++) {
            i = iObj[j];
            results.push(this.createInstance(i));
          }
          return results;
        } else if (iObj.domain != null) {
          obj = this.createDomainIfNotExist(iObj.domain).obj;
          delete iObj.domain;
          return obj.___.createInstance(iObj);
        } else {
          ref = iObj.watch;
          results1 = [];
          for (l = 0, len1 = ref.length; l < len1; l++) {
            wItem = ref[l];
            results1.push(this.eo[wItem] = this.callToCreate(wItem, iObj));
          }
          return results1;
        }
      },
      callToCreate: function(fName, iObj) {
        return function() {
          var args;
          args = 1 <= arguments.length ? slice.call(arguments, 0) : [];
          this.___.initInstance(iObj);
          return this[fName].apply(this, args);
        };
      },
      initInstance: function(iObj) {
        var instance, j, len, ref, results, wItem;
        this.removeAllSub();
        instance = iObj.create();
        this.eo.thisArg = instance;
        ref = iObj.watch;
        results = [];
        for (j = 0, len = ref.length; j < len; j++) {
          wItem = ref[j];
          results.push(this.createFunction(wItem, instance[wItem], {
            thisArg: instance
          }));
        }
        return results;
      }
    },
    addFunctions: {
      setFunctionToDomain: function(subDomain) {
        if (this.eo[subDomain] == null) {
          return this.eo[subDomain] = function() {
            var args, func, j, len, ref, ret;
            args = 1 <= arguments.length ? slice.call(arguments, 0) : [];
            ret = [];
            ref = this.___.functions[subDomain];
            for (j = 0, len = ref.length; j < len; j++) {
              func = ref[j];
              ret.push(func.apply(this, args));
            }
            if (this.___._ebIf != null) {
              delete this.___._ebIf;
            }
            return ret;
          };
        }
      },
      createFunction: function(subDomain, func, option) {
        if (typeof eb !== "undefined" && eb !== null ? eb.debug : void 0) {
          console.info("createFunction subDomain:" + subDomain + " func:", func);
        }
        if (this.functions[subDomain] == null) {
          this.functions[subDomain] = [];
        }
        this.functions[subDomain].push(function() {
          var args, thisArg;
          args = 1 <= arguments.length ? slice.call(arguments, 0) : [];
          thisArg = this.thisArg;
          if ((option != null ? option.thisArg : void 0) != null) {
            thisArg = option.thisArg;
          }
          if (this.___._ebIf == null) {
            return func.apply(thisArg, args);
          } else {
            if (this.___.objIsEqual(this.___._ebIf, thisArg)) {
              return func.apply(thisArg, args);
            }
          }
        });
        return this.setFunctionToDomain(subDomain);
      },
      objIsEqual: function(fromObj, toObj) {
        var k, v;
        if ((fromObj == null) || (toObj == null)) {
          return false;
        }
        for (k in fromObj) {
          v = fromObj[k];
          if (!(v === toObj[k])) {
            return false;
          }
        }
        return true;
      }
    },
    option: {
      setOption: function(options) {
        var key, opt, results;
        results = [];
        for (key in options) {
          opt = options[key];
          if (key === 'thisArg' && opt instanceof Object) {
            results.push(this.eo.thisArg = opt);
          } else if (key === 'onReady' && opt instanceof Boolean) {
            results.push(this.onReady = opt);
          } else if (key === 'remove' && (typeof opt === 'string' || opt instanceof String)) {
            results.push(this.ebRemove(opt));
          } else if (key === 'if' && opt instanceof Object) {
            results.push(this.ebIf(opt));
          } else if (opt instanceof Function) {
            results.push(this.createFunction(key, opt, options));
          } else if (key === 'instance' && (opt instanceof Object || opt instanceof Array)) {
            results.push(this.createInstance(opt));
          } else {
            if (typeof eb !== "undefined" && eb !== null ? eb.debug : void 0) {
              results.push(console.log("what do to with option[" + key + "]=", opt));
            } else {
              results.push(void 0);
            }
          }
        }
        return results;
      }
    }
  };

}).call(this);

//# sourceMappingURL=event-object-functions.js.map
